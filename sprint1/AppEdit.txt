class Calculator extends React.Component {
  constructor(props) {
    super(props);
    /* state variables */
    this.state = { 
      dist: "",
      format: 3,
      operand1: "", 
      operand2: "", 
      start: "",
      radius: 3958.7613,
      units: 0,
      lat1: "", 
      long1: "",
      lat2: "",
      long2: "",
      test: "",
    };
    /* must bind all functions in constructor */
    this.updateOperand1 = this.updateOperand1.bind(this);
    this.updateOperand2 = this.updateOperand2.bind(this);
    this.setFormat = this.setFormat.bind(this);
    this.splitDMS = this.splitDMS.bind(this);
    this.splitDDM = this.splitDDM.bind(this);
    this.calc = this.calc.bind(this);
    this.setUnits = this.setUnits.bind(this);
    this.toRadians = this.toRadians.bind(this);
    this.splitDD = this.splitDD.bind(this);
  }

  updateOperand1(event) {
    /* update the value of operand 1.  needs validation */
    this.setState({operand1 : event.target.value});
    if(this.state.format==0){
      this.splitDMS(event.target.value,1);
    }
    if(this.state.format==1){
      this.splitDDM(event.target.value,1);
    }
    if(this.state.format==2){
      this.splitDD(event.target.value,1);
    }
    if(this.state.format == 3) {
      var [lat, long] = event.target.value.split(' ');
      this.setState({lat1: this.toRadians(lat)});
      this.setState({long1: this.toRadians(long)});
    }
  }

  updateOperand2(event) {   
    /* update the value of operand 2.  needs validation */
    this.setState({operand2 : event.target.value});
    if(this.state.format==0){
      this.splitDMS(event.target.value,2);
    }
    if(this.state.format==1){
      this.splitDDM(event.target.value,2);
    }
    if(this.state.format==2){
      this.splitDD(event.target.value,2);
    }
    if(this.state.format == 3) {
      var [lat, long] = event.target.value.split(' ');
      this.setState({lat2: this.toRadians(lat)});
      this.setState({long2: this.toRadians(long)});
    }
 }
    
  splitDMS(DMS,operand){

      var [deg1, helper, rest] = DMS.split('°'); /* get degrees */
      rest = helper + '°' + rest;
      var [min1, helper, rest] = rest.split('′'); /* get minutes   */
      rest = helper + '′' + rest;
      var [sec1, helper, rest] = rest.split('″'); /* get seconds */
      rest = helper + '″' + rest;
      var dir1 = rest.substring(1,2);
      rest = rest.substring(2);
      var [deg2, rest] = rest.split('°'); /* get degrees */
      var [min2, rest] = rest.split('′'); /* get minutes */
      var [sec2, dir2] = rest.split('″'); /* get seconds */
      if(operand == 2) {
        if(dir1 == "S") {
          this.setState({lat2: Number((-1)*this.toRadians(Number(deg1) + min1/60 + sec1/3600))});
        } else { this.setState({lat2: Number(this.toRadians(Number(deg1) + min1/60 + sec1/3600))});}
        if(dir2 == "W") {
          this.setState({long2: Number((-1)*this.toRadians(Number(deg2) + min2/60 + sec2/3600))});
        } else { this.setState({long2: Number(this.toRadians(Number(deg2) + min2/60 + sec2/3600))});}
        } else {
        if(dir1 == "S") {
          this.setState({lat1: Number((-1)*this.toRadians(Number(deg1) + min1/60 + sec1/3600))});
        } else { this.setState({lat1: Number(this.toRadians(Number(deg1) + min1/60 + sec1/3600))});}
        if(dir2 == "W") {
          this.setState({long1: Number((-1)*this.toRadians(Number(deg2) + min2/60 + sec2/3600))});
        } else { this.setState({long1: Number(this.toRadians(Number(deg2) + min2/60 + sec2/3600))});}
      }

  }
    splitDDM(DDM,operand){
      var [deg1, helper, rest] = DDM.split('°'); /* get degrees */
      rest = helper + '°' + rest;
      var [min1, helper, rest] = rest.split('′'); /* get minutes   */
      rest = helper + '′' + rest;
      var dir1 = rest.substring(1,2);
      rest = rest.substring(2);
      var [deg2, rest] = rest.split('°'); /* get degrees */
      var [min2, rest] = rest.split('′'); /* get minutes */
     
      if(operand == 2) {
        if(dir1 == "S") {
          this.setState({lat2: Number((-1)*this.toRadians(Number(deg1) + min1/60))});
        } else { this.setState({lat2: Number(this.toRadians(Number(deg1) + min1/60))});}
        if(dir2 == "W") {
          this.setState({long2: Number((-1)*this.toRadians(Number(deg2) + min2/60))});
        } else { this.setState({long2: Number(this.toRadians(Number(deg2) + min2/60))});}
        } else {
        if(dir1 == "S") {
          this.setState({lat1: Number((-1)*this.toRadians(Number(deg1) + min1/60))});
        } else { this.setState({lat1: Number(this.toRadians(Number(deg1) + min1/60))});}
        if(dir2 == "W") {
          this.setState({long1: Number((-1)*this.toRadians(Number(deg2) + min2/60))});
        } else { this.setState({long1: Number(this.toRadians(Number(deg2) + min2/60))});}
      }
  }
    splitDD(DD,operand){
      var [deg1, helper, rest] = DD.split('°'); /* get degrees */
      rest = helper + '°' + rest;
      var dir1 = rest.substring(1,2);
      rest = rest.substring(2);
      var [deg2, rest] = rest.split('°'); /* get degrees */
     
      if(operand == 2) {
        if(dir1 == "S") {
          this.setState({lat2: Number((-1)*this.toRadians(Number(deg1)))});
        } else { this.setState({lat2: Number(this.toRadians(Number(deg1)))});}
        if(dir2 == "W") {
          this.setState({long2: Number((-1)*this.toRadians(Number(deg2)))});
        } else { this.setState({long2: Number(this.toRadians(Number(deg2)))});}
        } else {
        if(dir1 == "S") {
          this.setState({lat1: Number((-1)*this.toRadians(Number(deg1)))});
        } else { this.setState({lat1: Number(this.toRadians(Number(deg1)))});}
        if(dir2 == "W") {
          this.setState({long1: Number((-1)*this.toRadians(Number(deg2)))});
        } else { this.setState({long1: Number(this.toRadians(Number(deg2)))});}
      }
  }

  setFormat(event){
    this.setState({format: event.target.value});
  }
  calc(event) {
    this.setState({dist : Math.round(this.state.radius*Math.acos(Math.sin(this.state.lat1)*Math.sin(this.state.lat2)+Math.cos(this.state.lat1)*Math.cos(this.state.lat2)*Math.cos(this.state.long2-this.state.long1)))})
    event.preventDefault();
}
setUnits(event){
  this.setState({units: event.target.value});
  if(event.target.value == 0) {
   this.setState({radius: Number(3958.7613)});
  } else {
   this.setState({radius: Number(6371.0088)});
  }
}
toRadians(angle) {
    return angle * (Math.PI / 180);
}
  render() {
    /* a simple form with text input and a submit button  */
    return (
      
      <form className="form-inline" onSubmit={this.calc}>
        <p>
          {/*This is the dropdown menu
             Whichever option is selected, it changes this.state.format to 0 through 3 
          */}
        <div>
          <p> Select Input Format </p> <p>
            <select value={this.state.format} onChange={this.setFormat}>
              <option disbled>Choose One...</option>
              <option value="0">DMS [ 40° 26′ 46″ N 79° 58′ 56″ W ]</option>
              <option value="1">DDM [ 40° 26.767′ N 79° 58.933′ W ]</option>
              <option value="2">DD [ 40.446° N 79.982° W ]</option>
              <option value="3">FP [ 40.445 -79.982 ]</option>
            </select> </p>
          <p> Select Distance Units </p> <p>
            <select value={this.state.units} onChange={this.setUnits}>
              <option disbled>Choose One...</option>
              <option value="0">Miles</option>
              <option value="1">Kilometers</option>
            </select> </p>
        </div>
        </p>
        Start:
        <input type="text" className="text-right form-control mr-sm-2" 
          value={this.state.operand1} onChange={this.updateOperand1}/> 
        End:
        <input type="text" className="text-right form-control mr-sm-2" 
          value={this.state.operand2} onChange={this.updateOperand2}/> 
        <button className="btn btn-primary mr-sm-2" enabled>Calculate</button>
        <input type="text" className="text-right form-control mr-sm-2" 
          value={this.state.dist} disabled/>
      </form>
    )
  } 
}

class Application extends React.Component {
  render() {
    /* separate the page layout from the calculator function */
    return (
      <div className="jumbotron">
        <h3>CS 314 - Distance Calculator t07 - Jackalope</h3>
        <hr/>
        <Calculator />
      </div>  
    )
  }
}

ReactDOM.render(<Application  />, document.getElementById("application"));
